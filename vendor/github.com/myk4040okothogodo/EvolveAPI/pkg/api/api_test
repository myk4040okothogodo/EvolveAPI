package api


import (
    "bytes"
    "fmt"
    "io"
    "io/ioutil"
    "net/http"
    "net/http/httptest"
    "testing"
    "github.com/myk4040okothogodo/EvolveAPI/pkg/types"
    "github.com/go-chi/chi"
    "github.com/golang/mock/gomock"
    "github.com/stretchr/testify/assert"
    "go.uber.org/zap"
    "github.com/myk4040okothogodo/EvolveAPI/pkg/api/mocks"

)



var  (
    testUser1 = types.User{
        ID :     1,
        Email:  "johndoe@gmail.com",
        Phonenumber: "+254717256998",
        Address : "Banda-street 27",
        Birthday: "10-20-1998",
        Createdat: time.Now(),
    }

    testUser2 = types.User{
        ID :     2,
        Email:  "mykokoth@gmail.com",
        Phonenumber: "+254717000000",
        Address : "Tom-Mboya street 4",
        Birthday: "10-20-2000",
        Createdat: time.Now(),
    }
)

//TestGetRouter ensures that the router contains all expected routes
func TestGetRouter(t *testing.T){
    log, _ := zap.NewProduction(zap.WithCaller(false))
    r := GetRouter(log, nil)

    testcases := map[string]struct {
        method string
        path   string
    }{
        "GET /users": {
            method: http.MethodGet,
            path  : "/users",
        },
        "GET /users/{id}": {
            method: http.MethodGet,
            path  : "/users/id",
        },
        "GET /users/{email}": {
            method: http.MethodGet,
            path:   "/users/email",
        },
        "GET /users/{phonenumber}": {
            method: http.MethodGet,
            path:  "/users/phonenumber",
        },

    } 
    for name, test := range testcases {
        t.Run(name, func(t *testing.T) {
            got := r.Match(chi.NewRouteContext(), test.method, test.path)
            assert.Equal(t, true, got, fmt.Sprintf("not found: %s '%s'", test.method, test.path))
        })
    }

}



//go:generate $GOPATH/bin/mockgen -destination=./mocks/db.go -package=mocks github.com/myk4040okothogodo/Evolve/pkg/db ClientInterface

func getDBClientMock(t *testing.T) *mocks.MockClientInterface {
	ctrl := gomock.NewController(t)
	dbClient := mocks.NewMockClientInterface(ctrl)

	dbClient.EXPECT().GetUsers(gomock.Eq(0)).Return(&types.UserList{
		Items: []*types.User{
			&testUser1,
			&testUser2,
		},
	})

	dbClient.EXPECT().GetUsers(gomock.Eq(1)).Return(&types.UserList{
		Items: []*types.User{
			&testUser2,
		},
	})

	dbClient.EXPECT().GetUserByID(gomock.Eq(1)).Return(&testUser1).AnyTimes()

	dbClient.EXPECT().SetUser(gomock.Any()).DoAndReturn(func(user *types.User) error {
		if user.ID == 0 {
			user.ID = 1
		}
		return nil
	}).AnyTimes()

	return dbClient
}



// TestEndpoints ensures the expected results upon requests
func TestEndpoints(t *testing.T) {
	r := GetRouter(nil, getDBClientMock(t))
	ts := httptest.NewServer(r)
	defer ts.Close()

	testcases := map[string]struct {
		method   string
		path     string
		body     string
		header   http.Header
		wantCode int
		wantBody string
	}{
		"GET /users": {
			method:   http.MethodGet,
			path:     "/users",
			wantCode: http.StatusOK,
      wantBody: `{"items":[{"id":1,"email":"johndoe@gmail.com","phonenumber":"+254717256998","address": "Banda-street 27", "birthday": 10-20-1998, "createdat": tine.Now()},{"id":2,"email":"mykokoth@gmail.com","phonenumber":"+254717000000","address": "Tom-Mboya street 4", "birthday": 10-20-2000, "createdat": time.Now()}
		}`,

		"GET /users?page_id=1": {
			method:   http.MethodGet,
			path:     "/articles?page_id=1",
			wantCode: http.StatusOK,
			wantBody: `{"items":[{"id":1,"email":"johndoe@gmail.com","phonenumber":"+254717256998","address": "Banda-street 27", "birthday": 10-20-1998, "createdat": time.Now()}]}`,
		},
		"GET /users/{id}": {
			method:   http.MethodGet,
			path:     "/users/1",
			wantCode: http.StatusOK,
			wantBody: `{"id":2,"email":"mykokoth@gmail.com","phonenumber":"+254717000000","address": "Tom-Mboya street 4", "birthday": 10-20-2000, "createdat": time.Now()}`,
		},
		"PUT /users": {
			method: http.MethodPut,
			path:   "/users",
			body:   `{"email":"johndoe@gmail.com","phonenumber":"+254717256998","address": "Banda-street 27", "birthday": 10-20-1998, "createdat": time.Now()}`,
			header: map[string][]string{
				"Content-Type": {"application/json"},
			},
			wantCode: http.StatusOK,
			wantBody: `{"id":1,"email":"johndoe@gmail.com","phonenumber":"+254717256998","address": "Banda-street 27", "birthday": 10-20-1998, "createdat": time.Now()}`,
		},
		"Page Not Found": {
			method:   http.MethodGet,
			path:     "/blah",
			wantCode: http.StatusNotFound,
			wantBody: "404 page not found",
		},
	}

	for name, test := range testcases {
		t.Run(name, func(t *testing.T) {
			body := bytes.NewReader([]byte(test.body))
			gotResponse, gotBody := testRequest(t, ts, test.method, test.path, body, test.header)
			assert.Equal(t, test.wantCode, gotResponse.StatusCode)
			if test.wantBody != "" {
				assert.Equal(t, test.wantBody, gotBody, "body did not match")
			}
		})
	}
}


// testRequest is a helper function to exectute the http request against the server
func testRequest(t *testing.T, ts *httptest.Server, method, path string, body io.Reader, header http.Header) (*http.Response, string) {
	t.Helper()
	req, err := http.NewRequest(method, ts.URL+path, body)
	if err != nil {
		t.Fatal(err)
		return nil, ""
	}
	req.Header = header

	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		t.Fatal(err)
		return nil, ""
	}

	respBody, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		t.Fatal(err)
		return nil, ""
	}
	defer func() {
		_ = resp.Body.Close()
	}()
	respBody = bytes.TrimSpace(respBody)

	return resp, string(respBody)
}

